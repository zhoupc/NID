classdef NID < handle
    
    properties
        net = [];
        connector = []
        nid_folder = '';    % the folder
        net_name = 'pinky40_net_17';
        connector_name = '';
        iter = 2;
        input_size = [];
        fill_gap = false;
    end
    
    
    methods
        function obj = NID(input_size)
            % load a net if obj.net is empty
            if isempty(obj.net)
                nid_folder = fileparts(mfilename('fullpath'));
                net_file = fullfile(nid_folder, 'python', 'logs', [obj.net_name, '.onnx']);
                connector_file = fullfile(nid_folder, 'logs', [obj.connector_name, '.onnx']);
                obj.net = importONNXNetwork(net_file, 'OutputLayerType', 'regression');
                obj.connector = importONNXNetwork(connector_file, 'OutputLayerType', 'regression');
                
                obj.input_size = obj.net.Layers(1).InputSize;
            end
            
            % change the image size
            if exist('input_size', 'var')
                obj.change_input_size(input_size);
            end
        end
        
        %% change image size
        function obj = change_input_size(obj, input_size)
            if exist('input_size', 'var') && ~isempty(input_size) && any(input_size~=obj.input_size)
                % change denoiser
                input_layer = obj.net.Layers(1);
                input_layer_new = imageInputLayer(input_size, 'name', ...
                    input_layer.Name, 'Normalization', input_layer.Normalization);
                
                lgraph = [input_layer_new
                    obj.net.Layers(2:end)];
                
                obj.net = assembleNetwork(lgraph);
                obj.input_size = input_size;
                
                % change connector
                input_layer = obj.connector.Layers(1);
                input_layer_new = imageInputLayer(input_size, 'name', ...
                    input_layer.Name, 'Normalization', input_layer.Normalization);
                
                lgraph = [input_layer_new
                    obj.connector.Layers(2:end)];
                
                obj.connector = assembleNetwork(lgraph);
                obj.input_size = input_size;
            else
                fprintf('no need to change image size');
            end
        end
        
        %% denoise
        function [img, res_all] = denoise(obj, img, maxIter, fill_gap)
            
            if ~exist('fill_gap', 'var') || isempty(fill_gap)
                fill_gap = obj.fill_gap;
            end
            % get image dimension
            [d1, d2, ~] = size(img);
            if any([d1, d2]~=obj.input_size(1:2))
                obj.change_input_size([d1, d2, 1]);
            end
            
            if ~exist('maxIter', 'var') || isempty(maxIter)
                maxIter = obj.iter;
            end
            
            % estimate noise level
            se = strel('disk', 2);
            res = img;   % iteratively subtract useful information from the residual image
            res_all = cell(maxIter, 1);
            %             img_supp = true(size(img));
            for m=1:maxIter
                sn = std(res(:));
                if m==1
                    scale = 0.1 /sn;
                else
                    scale = 0.1 / sn;
                end
                res = obj.net.predict(res * scale) / scale; 
                res_all{m} = res;
                
                temp = (img - res); %.*(img_supp);
                img_supp = medfilt2(temp>sn*0.1);
                
                % link broken support
                if fill_gap
                    img_supp = (img_supp- obj.connector.predict(double(img_supp))>0.01);
                end
                img_supp = imdilate(img_supp, se);
                %                 imdilate(img_supp, se) &
                
                % connectivity
                %                 w = bwlabel(img_supp);
                %                 if m==1
                %                     % find the center
                %                     labels = unique(w(w>0));
                %                     total = zeros(size(labels));
                %                     for n=1:length(labels)
                %                         total(n) = sum(temp(w==labels(n)));
                %                     end
                %                     [~, idx_max] = max(total);
                %                     idx_center = (w==labels(idx_max));
                %                 end
                %                 img_supp(w~=mode(w(idx_center))) = false;
                
                %%
                ind = (~img_supp) | (res>img);
                res(ind) = img(ind);
            end
            
            img = img - res;
        end
        
        %%
        %% denoise
        function [img, res_all] = denoise_test(obj, img, maxIter)
            % get image dimension
            [d1, d2, ~] = size(img);
            if any([d1, d2]~=obj.input_size(1:2))
                obj.change_input_size([d1, d2, 1]);
            end
            
            if ~exist('maxIter', 'var') || isempty(maxIter)
                maxIter = obj.iter;
            end
            
            se = strel('disk', 1);
            res = img;   % iteratively subtract useful information from the residual image
            res_all = cell(obj.iter, 1);
            img_supp = true(size(img));
            for m=1:maxIter
                sn = std(res(img_supp(:)));  % estimate noise level
                scale = 0.1*min(m, 1) / sn ;  % scale image
                res = obj.net.predict(res * scale) / scale;  %denoise
                
                temp = (img - res); %.*(img_supp);
                %                 img_supp = imdilate(img_supp, se) & (temp>sn*0.2);
                img_supp = (temp>sn*0.2);
                
                %%
                ind = (~img_supp) | (res>img);
                res(ind) = img(ind);
                
                %% denoise the signal
                res_all{m} = res;
            end
            img = img - res;
            
        end
        
    end
    
end